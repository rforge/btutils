// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// processTradeInterface
Rcpp::List processTradeInterface(SEXP opIn, SEXP hiIn, SEXP loIn, SEXP clIn, int ibeg, int iend, int pos, double stopLoss, double stopTrailing, double profitTarget);
RcppExport SEXP btutils_processTradeInterface(SEXP opInSEXP, SEXP hiInSEXP, SEXP loInSEXP, SEXP clInSEXP, SEXP ibegSEXP, SEXP iendSEXP, SEXP posSEXP, SEXP stopLossSEXP, SEXP stopTrailingSEXP, SEXP profitTargetSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP opIn = Rcpp::as<SEXP >(opInSEXP);
        SEXP hiIn = Rcpp::as<SEXP >(hiInSEXP);
        SEXP loIn = Rcpp::as<SEXP >(loInSEXP);
        SEXP clIn = Rcpp::as<SEXP >(clInSEXP);
        int ibeg = Rcpp::as<int >(ibegSEXP);
        int iend = Rcpp::as<int >(iendSEXP);
        int pos = Rcpp::as<int >(posSEXP);
        double stopLoss = Rcpp::as<double >(stopLossSEXP);
        double stopTrailing = Rcpp::as<double >(stopTrailingSEXP);
        double profitTarget = Rcpp::as<double >(profitTargetSEXP);
        Rcpp::List __result = processTradeInterface(opIn, hiIn, loIn, clIn, ibeg, iend, pos, stopLoss, stopTrailing, profitTarget);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// processTradesInterface
Rcpp::List processTradesInterface(SEXP ohlcIn, SEXP ibegsIn, SEXP iendsIn, SEXP positionIn, SEXP stopLossIn, SEXP stopTrailingIn, SEXP profitTargetIn);
RcppExport SEXP btutils_processTradesInterface(SEXP ohlcInSEXP, SEXP ibegsInSEXP, SEXP iendsInSEXP, SEXP positionInSEXP, SEXP stopLossInSEXP, SEXP stopTrailingInSEXP, SEXP profitTargetInSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP ohlcIn = Rcpp::as<SEXP >(ohlcInSEXP);
        SEXP ibegsIn = Rcpp::as<SEXP >(ibegsInSEXP);
        SEXP iendsIn = Rcpp::as<SEXP >(iendsInSEXP);
        SEXP positionIn = Rcpp::as<SEXP >(positionInSEXP);
        SEXP stopLossIn = Rcpp::as<SEXP >(stopLossInSEXP);
        SEXP stopTrailingIn = Rcpp::as<SEXP >(stopTrailingInSEXP);
        SEXP profitTargetIn = Rcpp::as<SEXP >(profitTargetInSEXP);
        Rcpp::List __result = processTradesInterface(ohlcIn, ibegsIn, iendsIn, positionIn, stopLossIn, stopTrailingIn, profitTargetIn);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// tradesFromSignalInterface
Rcpp::List tradesFromSignalInterface(SEXP sigIn);
RcppExport SEXP btutils_tradesFromSignalInterface(SEXP sigInSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP sigIn = Rcpp::as<SEXP >(sigInSEXP);
        Rcpp::List __result = tradesFromSignalInterface(sigIn);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// getReturnsInterface
Rcpp::NumericVector getReturnsInterface(SEXP ibegIn, SEXP iendIn, SEXP positionIn, SEXP returnsIn);
RcppExport SEXP btutils_getReturnsInterface(SEXP ibegInSEXP, SEXP iendInSEXP, SEXP positionInSEXP, SEXP returnsInSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP ibegIn = Rcpp::as<SEXP >(ibegInSEXP);
        SEXP iendIn = Rcpp::as<SEXP >(iendInSEXP);
        SEXP positionIn = Rcpp::as<SEXP >(positionInSEXP);
        SEXP returnsIn = Rcpp::as<SEXP >(returnsInSEXP);
        Rcpp::NumericVector __result = getReturnsInterface(ibegIn, iendIn, positionIn, returnsIn);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
